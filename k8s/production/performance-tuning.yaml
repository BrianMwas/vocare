# Performance Tuning Configurations
# Optimizations for production workloads

# Horizontal Pod Autoscaler for Backend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: vocare-restaurant
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend-deployment
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30

---
# Vertical Pod Autoscaler for LiveKit (if VPA is installed)
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: livekit-vpa
  namespace: vocare-restaurant
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: livekit-deployment
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: livekit-server
      maxAllowed:
        cpu: "2"
        memory: 2Gi
      minAllowed:
        cpu: 100m
        memory: 128Mi

---
# Node Affinity and Anti-Affinity Rules
apiVersion: v1
kind: ConfigMap
metadata:
  name: affinity-rules
  namespace: vocare-restaurant
data:
  backend-affinity.yaml: |
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - vocare-backend
            topologyKey: kubernetes.io/hostname
      nodeAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 50
          preference:
            matchExpressions:
            - key: kubernetes.io/instance-type
              operator: In
              values:
              - Standard_D2s_v3
              - Standard_D4s_v3

  freeswitch-affinity.yaml: |
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: vocare.com/telephony
              operator: In
              values:
              - "true"
        preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          preference:
            matchExpressions:
            - key: kubernetes.io/instance-type
              operator: In
              values:
              - Standard_D4s_v3
              - Standard_D8s_v3
    tolerations:
    - key: "vocare.com/freeswitch"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"

---
# Performance ConfigMap with tuning parameters
apiVersion: v1
kind: ConfigMap
metadata:
  name: performance-config
  namespace: vocare-restaurant
data:
  # Backend performance settings
  WORKER_PROCESSES: "2"
  WORKER_CONNECTIONS: "1000"
  MAX_REQUESTS: "1000"
  MAX_REQUESTS_JITTER: "100"
  TIMEOUT: "30"
  KEEPALIVE: "5"

  # LiveKit performance settings
  LIVEKIT_MAX_PARTICIPANTS: "50"
  LIVEKIT_ROOM_TIMEOUT: "300"
  LIVEKIT_DEPARTURE_TIMEOUT: "20"

  # FreeSWITCH performance settings
  FREESWITCH_MAX_SESSIONS: "1000"
  FREESWITCH_SESSIONS_PER_SECOND: "30"
  FREESWITCH_RTP_START_PORT: "30000"
  FREESWITCH_RTP_END_PORT: "30100"

  # Database connection pooling
  DB_POOL_SIZE: "20"
  DB_MAX_OVERFLOW: "30"
  DB_POOL_TIMEOUT: "30"
  DB_POOL_RECYCLE: "3600"

---
# Quality of Service Classes
apiVersion: v1
kind: ConfigMap
metadata:
  name: qos-classes
  namespace: vocare-restaurant
data:
  guaranteed-qos.yaml: |
    # For critical services that need guaranteed resources
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
      limits:
        memory: "1Gi"
        cpu: "500m"

  burstable-qos.yaml: |
    # For services that can burst above requests
    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "1000m"

  besteffort-qos.yaml: |
    # For non-critical services (no resource guarantees)
    resources: {}

---
# Topology Spread Constraints
apiVersion: v1
kind: ConfigMap
metadata:
  name: topology-spread
  namespace: vocare-restaurant
data:
  spread-constraints.yaml: |
    topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: DoNotSchedule
      labelSelector:
        matchLabels:
          app: vocare-backend
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app: vocare-backend